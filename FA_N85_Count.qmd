---
title: "FA_N85_Count"
format: html
editor: source
---

```{r}
if (!require(librarian)){
  install.packages("librarian")
  library(librarian)
}

# librarian downloads, if not already downloaded, and reads in needed packages
librarian::shelf(tidyverse, here, DBI, odbc, padr, scales)

```

```{r}
tryCatch({  # Attempts the database connection and catches any errors
    db_connection <- DBI::dbConnect(odbc::odbc(),  # Creates a connection using the ODBC driver
                             Driver="SnowflakeDSIIDriver",  # Specifies the Snowflake ODBC driver
                             Server="hawaiianair.west-us-2.azure.snowflakecomputing.com",  # Points to the Snowflake server
                             WAREHOUSE="DATA_LAKE_READER",  # Selects the data warehouse
                             Database="ENTERPRISE",  # Selects the Enterprise database
                             UID= Sys.getenv("UID"),  # Retrieves the user ID from the environment variables
                             authenticator = "externalbrowser")  # Uses external browser authentication
    print("Database Connected!")  # Prints a message if the connection is successful
    },
    error=function(cond) {  # Defines error handling if the connection fails
            print("Unable to connect to Database.")  # Prints an error message
})

# Set search_path
dbExecute(db_connection, "USE SCHEMA CREW_ANALYTICS")  # Sets the working schema to 'CREW_ANALYTICS' in the database

q_master_history <- "SELECT * FROM CT_MASTER_HISTORY WHERE PAIRING_DATE > '2024-04-20';"

ms <- dbGetQuery(db_connection, q_master_history) 


```

```{r}

n_85_counts <- ms %>% 
  mutate(update_dt = paste(UPDATE_DATE, UPDATE_TIME, sep = " ")) %>% 
  group_by(CREW_ID, PAIRING_NO, PAIRING_DATE) %>% 
  filter(update_dt == max(update_dt), TRANSACTION_CODE == "N85") %>% 
  ungroup() %>% 
  group_by(PAIRING_DATE, BASE) %>% 
  summarize(FA_N85_Counts = n_distinct(CREW_ID), .groups = "drop") %>% 
  # Complete the date range for each base and fill missing counts with zero
  complete(PAIRING_DATE = seq.Date(min(ms$PAIRING_DATE), max(ms$PAIRING_DATE), by = "day"), BASE, fill = list(FA_N85_Counts = 0)) %>% 
  mutate(PAIRING_YEAR_MONTH = format(PAIRING_DATE, "%Y-%m"))

#write_csv(n_85_counts, here("n_85_counts.csv"))

```

```{r}

ggplot(data = n_85_counts, aes(x = PAIRING_DATE, y = FA_N85_Counts, fill = BASE)) +
  geom_col(width = 0.8) +
  labs(
    title = "FA N85 Counts by Pairing Date",
    x = "Pairing Date (Year-Month)",
    y = "FA N85 Counts"
  ) +
  scale_fill_manual(values = c("#5A2D81", "#EA4D8D")) +
  scale_x_date(date_breaks = "1 month", date_labels = "%Y-%m") +  # Display every year-month
  scale_y_continuous(expand = c(0, 0)) +  # Remove y-axis padding
  facet_wrap(~ BASE, ncol = 1, scales = "free_y") +  # Separate charts per base, each with independent y-scales
  theme_classic() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    axis.title.x = element_text(size = 12),
    axis.title.y = element_text(size = 12),
    axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels for readability
    legend.position = "none"  # Remove legend as each chart is specific to one base
  ) +
  xlab("Pairing Date")




```

